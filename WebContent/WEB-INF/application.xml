<?xml version="1.0" encoding="GBK"?>
<root>

	<common-app-config>

		<debug>true</debug><!--架构全局debug参数，属于程序中使用LogMgr类进行日志输出的开关 -->

		<app-param>
			<param-name>_queryMaxPageLinesLimite</param-name>
			<param-value>500</param-value>
			<param-desc>QueryLogicHandler和通用查询工具查询时候输出的每页条数最大限制,默认1000
			</param-desc>
		</app-param>

		<app-param>
			<param-name>usePreparedStatement</param-name>
			<param-value>true</param-value>
			<param-desc>
				系统的数据库SQL执行是否采用预编译方式执行的全局参数，假如不配置则默认是false,整个系统对于SQL预编译执行的先后判断规则如下：
				1、如果涉及到BLOB/Cob字段更新场景下：如果是ORACLE数据库则强制采用Statement方式执行,如果非ORACLE（如MYSQL数据库）强制采用PreparedStatement执行
				2、如果是分页查询强制采用Statement方式执行
				3、非上述两种情况，那么根据以下规则执行：
				1）、如果DAOTask配置文件里的Clause里指定了usePreparedStatement属性，则优先按照DAOTask里配置的参数来执行
				2）、如果DAOTask配置文件里没有配置usePreparedStatement，则根据系统全局的usePreparedStatement参数进行执行。
			</param-desc>
		</app-param>
		<app-param>
			<param-name>USE_ORACLE_FIRST_ROWS</param-name>
			<param-value>true</param-value>
			<param-desc>
				针对oracle数据库查询是否使用first_rows，一般情况下设置为true，大多数情况下使用first_rows策略后性能有所提高，
				但是，特殊的查询语句在特定条件下加了first_rows反而会变慢，这种时候可以在语句中添加注释/*not use
				first_rows*/不强制加first_rows。
			</param-desc>
		</app-param>

		<app-param>
			<param-name>ORACLE_OPTIMIZER_CLAUSE</param-name>
			<param-value>first_rows</param-value>
			<param-desc>
				当设置了USE_ORACLE_FIRST_ROWS为true后，系统默认是在SQL中加入优化策略注释“/*+first_rows*/”，
				ORACLE_OPTIMIZER_CLAUSE参数是允许用户自定义优化策略,如:first_rows(200)等,因为高版本的ORACLE数据库下通过自定义优化策略可以提高查询效率
				如果ORACLE_OPTIMIZER_CLAUSE参数为空则系统默认为：first_rows
			</param-desc>
		</app-param>

		<app-param>
			<param-name>DynamicLoadConfig</param-name>
			<param-value>true</param-value>
			<param-desc>
				是否动态加载配置文件，该参数一般建议设置为true，如果设置为true，系统startup框架启动后会自动针对每个框架启动一个配置文件监听线程，
				用于监听配置文件的变化（增加、修改、删除），从而动态改变内存对象，实现配置文件热部署
			</param-desc>
		</app-param>

		<app-param>
			<param-name>invoke_soa_by_command</param-name>
			<param-value>false</param-value>
			<param-desc>
				针对SOA架构客户端和服务端之间通信协议有两种，一种是采用COMMAND架构远程调用SOA服务构件的方式，另一种是采用SCTP简单命令传输协议调用方式，
				解决了高并发下SCTP方式连接服务器经常出错的问题,系统默认是采用SCTP远程调用方式
			</param-desc>
		</app-param>

		<loader>
			<name>LogLoader</name>
			<type>cn.com.jdls.foundation.startup.LogLoader</type>
			<loader-param>
				<param-name>LogConfigFileName</param-name>
				<param-value>Log4jconfig.properties</param-value>
				<param-desc>log4j的配置文件，必须配置</param-desc>
			</loader-param>
			<enable>true</enable>
		</loader>

		<loader>
			<name>PoolLoader</name>
			<type>cn.com.jdls.foundation.startup.PoolLoader</type>
			<loader-param>
				<param-name>PoolConfigFileName</param-name>
				<param-value>PoolConfig</param-value>
			</loader-param>
			<enable>true</enable>
			<description>Pool框架初始化</description>
		</loader>

		<loader>
			<name>CommandLoader</name>
			<type>cn.com.jdls.foundation.architectures.command.startup.CommandLoader
			</type>
			<loader-param>
				<param-name>CommandConfigFileName</param-name>
				<param-value>CommandConfig</param-value>
			</loader-param>
			<enable>false</enable>
			<description>系统COMMAND架构初始化类</description>
		</loader>

		<loader>
			<name>DaoLoader</name>
			<type>cn.com.jdls.foundation.startup.DaoLoader</type>
			<loader-param>
				<param-name>DaoConfigFilePath</param-name>
				<param-value>DAOConfig</param-value>
			</loader-param>
			<enable>true</enable>
			<description>DAO框架初始化</description>
		</loader>


		<loader>
			<name>LogicLoader</name>
			<type>cn.com.jdls.foundation.startup.LogicLoader</type>
			<loader-param>
				<param-name>LogicConfigFilePath</param-name>
				<param-value>BusinessLogic</param-value>
			</loader-param>
			<enable>true</enable>
			<description>Logic框架的初始化</description>
		</loader>




		<loader>
			<name>SoaManagerLoader</name>
			<type>cn.com.jdls.foundation.architectures.soa.manager.SoaManagerLoader
			</type>
			<loader-param>
				<param-name>user</param-name>
				<param-value>jdls</param-value>
			</loader-param>
			<loader-param>
				<param-name>password</param-name>
				<param-value>{ENCRYPT}5A07664F565E5D465D637A465768674163717905615D455B6D7D545C517641686C6366706601740969640D0B
				</param-value>
			</loader-param>
			<loader-param>
				<param-name>port</param-name>
				<param-value>6517</param-value>
			</loader-param>
			<loader-param>
				<param-name>timeout</param-name><!--SOA容器接收请求包超时设置（单位:秒，默认0，为永不超时），一般设置为0 -->
				<param-value>0</param-value>
			</loader-param>
			<loader-param>
				<param-name>maxConnCount</param-name><!--SOA容器并发最大连接数 -->
				<param-value>9999</param-value>
			</loader-param>
			<loader-param>
				<param-name>cacheSize</param-name><!--SOA容器执行的服务实例（包括正在执行的和已经执行的）内存最大缓存个数 -->
				<param-value>100</param-value>
			</loader-param>
			<loader-param>
				<param-name>debug</param-name>
				<param-value>true</param-value>
			</loader-param>
			<loader-param>
				<param-name>saveMonitorDataToDatabase</param-name><!--SOA容器执行的服务实例监控数据是否保存到数据库XT_SOA表 -->
				<param-value>false</param-value>
			</loader-param>
			<loader-param>
				<param-name>monitorDatabaseName</param-name><!--SOA容器执行的服务实例监控数据保存到哪个数据库中 -->
				<param-value>iitmsdb</param-value>
			</loader-param>
			<enable>false</enable>
			<description>SOA容器初始化</description>
		</loader>


		<loader>
			<name>UDDIServerLoader</name>
			<type>cn.com.jdls.foundation.architectures.soa.uddi.server.UDDIServerLoader
			</type>
			<loader-param>
				<param-name>UDDIConfigFilePath</param-name>
				<param-value>UDDIConfig</param-value>
			</loader-param>
			<loader-param>
				<param-name>ip</param-name><!--本机的监听IP地址 -->
				<param-value>192.168.60.15</param-value>
			</loader-param>
			<loader-param>
				<param-name>port</param-name>
				<param-value>9999</param-value>
			</loader-param>
			<loader-param>
				<param-name>password</param-name>
				<param-value>jdlssoa</param-value>
			</loader-param>
			<loader-param>
				<param-name>timeout</param-name><!--流控服务器接收请求超时设置,单位:秒 -->
				<param-value>0</param-value>
			</loader-param>
			<loader-param>
				<param-name>maxConnCount</param-name><!--最大并发连接数 -->
				<param-value>9999</param-value>
			</loader-param>
			<!--以下三个为备UDDIServer的连接参数,管理配置参数和同步内存令牌参数时候生效 -->
			<loader-param>
				<param-name>uddiServerIpBackup</param-name>
				<param-value>192.168.60.15</param-value>
			</loader-param>
			<loader-param>
				<param-name>uddiServerPortBackup</param-name>
				<param-value>9990</param-value>
			</loader-param>
			<loader-param>
				<param-name>uddiServerPasswordBackup</param-name>
				<param-value>jdlssoa</param-value>
			</loader-param>
			<loader-param>
				<param-name>debug</param-name>
				<param-value>true</param-value>
			</loader-param>
			<loader-param>
				<param-name>cacheSize</param-name><!--每个渠道申请令牌的请求实例（包括正在执行的和已经执行的）内存最大缓存个数 -->
				<param-value>10</param-value>
			</loader-param>
			<enable>false</enable>
			<description>UDDI服务器（流量控制器服务端）初始化</description>
		</loader>

		<loader>
			<name>UDDIClientLoader</name>
			<type>cn.com.jdls.foundation.architectures.soa.uddi.client.UDDIClientLoader
			</type>
			<enable>false</enable>
			<description>UDDI客户端（流量控制器客户端）初始化，CONFIG目录下固化配置文件UDDIClient.xml
			</description>
		</loader>


	</common-app-config>

</root>
